from random import randrange

import vk_api
from vk_api import keyboard
from vk_api.longpoll import VkLongPoll, VkEventType

from VK.VKUser import config_read, VkUser
from DB.BD_VK import insert_client, insert_blocked, insert_favorites, check_client, search_count, \
    result_favorites, delete_favorites, update_user_city


class VKinder:
    '''
        –ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ VK.
        ...
        –ê—Ç—Ä–∏–±—É—Ç—ã
        --------
        conn - —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        user_vk - –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ –∫–ª—é—á—É –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        public_vk - –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ –∫–ª—é—á—É —Å–æ–æ–±—â–µ—Å—Ç–≤–∞

        –ú–µ—Ç–æ–¥—ã
        ------
        write_msg(self, user_id, message, keyboard=None):
            –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        send_photos(self, user_id, likes, owner_id, first_name, age, keyboard):
            –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        wait_message(self, longpoll):
            –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—à–ª–∏ –±–æ—Ç—É.
        bot_keyboard(self):
            –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ –¥–∏–∞–ª–æ–≥–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
        photos(self, event, db_client_id, user, suitable, counter, user_city):
            –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        search_peoples(self, event, longpoll, offset, user_city):
            –î–æ–ø. –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
        listen(self, city):
            –ú–µ—Ç–æ–¥ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞.
        '''

    def __init__(self, user_token: str, public_token: str, conn):
        self.user_token = user_token
        self.public_token = public_token
        self.user_vk = vk_api.VkApi(token=self.user_token)
        self.public_vk = vk_api.VkApi(token=self.public_token)
        self.conn = conn

    def write_msg(self, user_id, message, keyboard=None):
        """–ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. """
        self.public_vk.get_api().messages.send(
            user_id=user_id,
            message=message,
            random_id=randrange(10 ** 7),
            keyboard=keyboard)

    def send_photos(self, user_id, likes, owner_id: int, first_name, age, keyboard=None):
        """
            –ú–µ—Ç–æ–¥, –≤—ã–ø–æ–ª–Ω—è—é—â–∏–π –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —Å–≤—è–∑–∫–µ
        —Å –¥—Ä—É–≥–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏.
        """
        photos = self.user_vk.get_api().photos.get(owner_id=owner_id,
                                                   album_id='profile',
                                                   extended=1, rev=0)

        id_photos = []
        for photo in photos['items']:
            if photo['likes']['count'] in likes:
                id_photos.append(photo['id'])
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
        if len(id_photos) == 2:
            photos = f"photo{owner_id}_{id_photos[0]},photo{owner_id}_{id_photos[1]}"
        elif len(id_photos) == 1:
            photos = f"photo{owner_id}_{id_photos[0]}"
        else:
            photos = f"photo{owner_id}_{id_photos[0]},photo{owner_id}_{id_photos[1]},photo{owner_id}_{id_photos[2]}"
        response = self.public_vk.get_api().messages.send(
            user_id=user_id,
            message=f'{first_name}, {age}',
            attachment=photos,
            random_id=randrange(0, 100 ** 10000),
            keyboard=keyboard.get_keyboard())
        return response

    def wait_message(self, longpoll):
        """–î–∞–Ω–Ω–∞—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∞—è—Å—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∂–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏—à–ª–æ –∏–º–µ–Ω–Ω–æ –±–æ—Ç—É."""
        for event in longpoll.listen():
            if event.type == VkEventType.MESSAGE_NEW:
                if event.to_me:
                    request = event.text
                    return request, event.user_id

    def bot_keyboard(self):
        """ –ú–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –≤ –¥–∏–∞–ª–æ–≥–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. """
        rate = keyboard.VkKeyboard(one_time=True)
        rate.add_button(label='‚ù§', color=keyboard.VkKeyboardColor.NEGATIVE)
        rate.add_button(label='üëéüèª', color=keyboard.VkKeyboardColor.PRIMARY)
        rate.add_line()
        rate.add_button(label='–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫', color=keyboard.VkKeyboardColor.SECONDARY)

        start_search = keyboard.VkKeyboard(one_time=True)
        start_search.add_button(label='–ü–æ–∏—Å–∫', color=keyboard.VkKeyboardColor.POSITIVE)

        next_people_button = keyboard.VkKeyboard(one_time=True)
        next_people_button.add_button(label='–°–º–æ—Ç—Ä–µ—Ç—å —Å–ª–µ–¥—É—é—â–∏—Ö.')
        next_people_button.add_button(label='–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫', color=keyboard.VkKeyboardColor.SECONDARY)
        return rate, start_search, next_people_button

    def photos(self, user_id, db_client_id, user, suitable, counter: int, user_city):
        """
            –ú–µ—Ç–æ–¥ –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å–≤—è–∑–∫–µ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π listen.
        –í —Ñ—É–Ω–∫—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∫—É—Ä—Å–∏–π, –±–µ–∑ –Ω–∏—Ö –±–æ—Ç –ø–µ—Ä–µ—Å—Ç–∞—ë—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–∞–∂–¥–∞—è —Ä–µ–∫—É—Ä—Å–∏—è —Ñ—É–Ω–∫—Ü–∏–∏,
        –Ω–æ–≤—ã–π —á–µ–ª–æ–≤–µ–∫.
        """
        print('yes')
        rate, start_search, next_people_button = self.bot_keyboard()
        longpoll = VkLongPoll(self.public_vk)
        if not user.enumeration_ids(counter=counter, suitable=suitable) is None:
            try:
                owner_id, first_name, last_name, age, sex, city, counter = user.enumeration_ids(counter=counter,
                                                                                                suitable=suitable)
            except ValueError:
                self.write_msg(user_id, '–í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö. –•–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å —Å–ª–µ–¥—É—é—â–∏–π?',
                               keyboard=next_people_button.get_keyboard())
                request, user_id = self.wait_message(longpoll)
                if request == '–°–º–æ—Ç—Ä–µ—Ç—å —Å–ª–µ–¥—É—é—â–∏—Ö.':
                    self.search_peoples(user_id, longpoll, 300, user_city)
                elif request == '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫':
                    self.listen()
        else:
            try:
                owner_id, first_name, last_name, age, city, sex, counter = user.enumeration_ids(counter=counter + 1,
                                                                                                suitable=suitable)
            except ValueError:
                self.write_msg(user_id,
                               '''–í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤–µ—Å—å –ø–µ—Ä–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö. –•–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å —Å–ª–µ–¥—É—é—â–∏–π?''',
                               keyboard=next_people_button.get_keyboard())
                request, user_id = self.wait_message(longpoll).strip()
                if request == '–°–º–æ—Ç—Ä–µ—Ç—å —Å–ª–µ–¥—É—é—â–∏—Ö.':
                    self.search_peoples(user_id, longpoll, 300, user_city)
                elif request == '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫':
                    self.listen()
        likes = user.get_likes_most_popular_photos(owner_id)[:3]
        self.send_photos(user_id, likes, owner_id, first_name, age, rate)
        request, user_id = self.wait_message(longpoll)
        if request.strip() == '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫':
            self.write_msg(user_id,
                           '''–ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.''')
            self.write_msg(user_id,
                           '''–•–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –ª—é–¥–µ–π –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞–º–∏?. \n1. –î–∞\n2. –ù–µ—Ç''')
            choice, user_id = self.wait_message(longpoll)
            if choice.strip().lower() in ['1', '–¥–∞']:
                favorites = result_favorites(self.conn, user_id)
                text = ''
                for favorite in favorites:
                    text += f'{favorite[0]}, {favorite[3]} - https://vk.com/id{favorite[4]}\n'
                self.write_msg(user_id,
                               f'–õ—é–¥–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–∞–º–∏.\n\n{text}')
            delete_favorites(self.conn, user_id)
            self.write_msg(user_id,
                           '''–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "–ü–æ–∏—Å–∫" –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É.''',
                           keyboard=start_search.get_keyboard())
            self.listen()
        elif request.strip() == '‚ù§':
            insert_favorites(self.conn, db_client_id, first_name, last_name, city, age, owner_id, sex)

            self.write_msg(user_id, f'[id{owner_id}|–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ–±—â–µ–Ω–∏—è –Ω–∞–∂–∏–º–∞–π –Ω–∞ –º–µ–Ω—è &#9995;]')
            self.photos(user_id=user_id, db_client_id=db_client_id, user=user, suitable=suitable, counter=counter,
                        user_city=user_city)
        elif request.strip() == 'üëéüèª':
            insert_blocked(self.conn, db_client_id, owner_id)
            self.photos(user_id=user_id, db_client_id=db_client_id, user=user, suitable=suitable, counter=counter,
                        user_city=user_city)
        else:
            self.write_msg(user_id, "–ù–µ –ø–æ–Ω—è–ª –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞...")


    def search_peoples(self, user_id, longpoll, offset=0, user_city=None):
        """
        –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ª—é–¥–µ–π,
        –≤—ã–≤–µ–¥–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –±—ã–ª–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —Ä–µ–∫—É—Ä—Å–∏–∏,
        –∏ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –Ω–µ —Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å –Ω–∞—á–∏–Ω–∞—Ç—å —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞ –ª–æ–≥–∏–∫–∏ –±–æ—Ç–∞

        user_city - –ø–∞—Ä–∞–º–µ—Ç—Ä –∫–æ—Ç–æ—Ä–∞—è —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Ä–µ–∫—É—Ä—Å–∏–∏,
        suitable - —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥—è—Ç—Å—è –ø–æ–¥—Ö–æ–¥—è—â–∏–µ, –¥–∞–ª–µ–µ –¥–µ–ª–∞–µ–º –ø–æ –Ω–µ–º—É —Ü–∏–∫–ª.
        """
        user_id = user_id
        user = VkUser(user_id, self.conn)
        f_name, l_name, age, city, relation, sex = user.get_user_info(user_id)
        if user_city is not None:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –≤—ã–∑–≤–∞–Ω–∞ –∏–ª–∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ.
            city = user_city
        if city is None:
            self.write_msg(user_id,
                           f"{f_name}, –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ &#127970;")
            city, user_id = self.wait_message(longpoll)
        else:
            if user_city is None:
                self.write_msg(user_id,
                               f'{f_name}, \n–í–∞—à –≥–æ—Ä–æ–¥ - "{city}". \n–ò—â–µ–º –ø–æ –Ω–µ–º—É?\n1. –î–∞\n2. –ù–µ—Ç')
                choice, user_id = self.wait_message(longpoll)
                if choice.strip() == '2' or choice.strip().lower() == '–Ω–µ—Ç':
                    self.write_msg(user_id,
                                   f"{f_name}, –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ &#127970;")
                    city, user_id = self.wait_message(longpoll)

        if len(check_client(self.conn, user_id)) == 0:
            insert_client(self.conn, f_name, l_name, city, age, user_id, sex)
        else:
            update_user_city(self.conn, user_id, city)
        client_id = search_count(self.conn, user_id)
        self.write_msg(user_id,
                       f"{f_name}, –≤–∞—à–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ:")

        suitable = user.search_users_by_city_sex(city, sex, offset)
        print(suitable)
        for client in suitable:

            self.photos(user_id=user_id, db_client_id=client_id, user=user, suitable=suitable, counter=0, user_city=city)

    def listen(self):
        """–ù–∞—á–∞–ª–æ –ª–æ–≥–∏–∫–∏ –±–æ—Ç–∞.
        –¢—É—Ç —Å–æ–∑–¥–∞–µ–º LongPoll —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
        –ü–µ—Ä–≤–æ–µ —É—Å–ª–æ–≤–∏–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –±–æ–ª—å—à–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—à–ª–∏ –≤–ø–µ—Ä–≤—ã–µ, —É –Ω–∏—Ö –±—É–¥–µ—Ç –∫–Ω–æ–ø–∫–∞ Start & –ù–∞—á–∞—Ç—å,
        –í—Ç–æ—Ä–æ–µ —É—Å–ª–æ–≤–∏–µ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–æ–∏—Å–∫ –ª—é–¥–µ–π."""
        longpoll = VkLongPoll(self.public_vk)
        start_search = keyboard.VkKeyboard(one_time=True)
        start_search.add_button(label='–ü–æ–∏—Å–∫', color=keyboard.VkKeyboardColor.POSITIVE)
        for event in longpoll.listen():
            if event.type == VkEventType.MESSAGE_NEW:
                if event.to_me:
                    request = event.text
                    if request.lower().strip() in ['start', '–Ω–∞—á–∞—Ç—å']:
                        self.write_msg(event.user_id, '''–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª—é–¥–µ–π –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É.''',
                                       keyboard=start_search.get_keyboard())
                    elif request.lower().strip() == "–ø–æ–∏—Å–∫":
                        self.search_peoples(event.user_id, longpoll)

                    elif request.strip().lower() == "–ø–æ–∫–∞":
                        self.write_msg(event.user_id, "–ü–æ–∫–∞ :(")
                    else:
                        self.write_msg(event.user_id, "–ù–µ –ø–æ–Ω—è–ª –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞...")